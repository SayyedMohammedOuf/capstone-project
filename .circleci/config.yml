version: 2.1

jobs:
  Linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run Lint
          command: |
            . venv/bin/activate
            make lint

  Testing:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run Test
          command: |
            . venv/bin/activate
            make test

  Push Docker Container To Dockerhub Repo:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            docker build --tag=capstone-project-$CIRCLE_WORKFLOW_ID .
            # List docker images
            docker image ls
            docker run -d -p 5000:5000 capstone-project-$CIRCLE_WORKFLOW_ID
            dockerpath=sayyedmo/capstone-project
            # Authenticate & tag
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            echo "Docker ID and Image: $dockerpath"
            docker tag capstone-project-$CIRCLE_WORKFLOW_ID sayyedmo/capstone-project:$CIRCLE_WORKFLOW_ID
            # Push image to a docker repository
            docker push sayyedmo/capstone-project:$CIRCLE_WORKFLOW_ID
  Create EKS Cluster:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install EKSCTL Tool
          command: |
            apk add --update tar gzip  curl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.83.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create EKS Cluster
          command: |
            id = "5dc412a2-a11a-4322-a803-945634be867f"
            eksctl create cluster --name=myEKSCluster-$id

  Deploy Cluster to EKS:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Kubectl Tool & docker
          command: |
            apk add --update curl docker openr
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Deploy Cluster
          command: |
            id = "5dc412a2-a11a-4322-a803-945634be867f"
            docker pull sayyedmo/capstone-project:$id
            echo "Sayyed_1"
            # Deploy an App from the Dockerhub to the Kubernetes Cluster
            kubectl create deploy capstone-project-$id --image=sayyedmo/capstone-project:$id
            echo "Sayyed_2"
            # See the status
            app_pod = kubectl get pods --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
            echo "APP_POD: "
            echo $app_pod
            # Port forward
            kubectl port-forward $app_pod --address 0.0.0.0 5000:5000
            echo "FINAL"


workflows:
  default:
    jobs:
#      - Linting
#      - Testing:
#          requires: [Linting]
#      - Push Docker Container To Dockerhub Repo:
#          requires: [Testing]
      - Create EKS Cluster
#          requires: [Push Docker Container To Dockerhub Repo]
      - Deploy Cluster to EKS:
          requires: [Create EKS Cluster]